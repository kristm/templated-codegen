// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: client.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Create client RPC payload
type ClientCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                      // Client ID, when it's blank it will be automatically generated
	Name                  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Client name
	Website               string   `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`                                                            // Website
	RedirectUri           string   `protobuf:"bytes,4,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`                                 // Redirect URI
	RedirectUriStaging    string   `protobuf:"bytes,6,opt,name=redirect_uri_staging,json=redirectUriStaging,proto3" json:"redirect_uri_staging,omitempty"`          // Redirect URI for staging environment
	RedirectUriProduction string   `protobuf:"bytes,5,opt,name=redirect_uri_production,json=redirectUriProduction,proto3" json:"redirect_uri_production,omitempty"` // Redirect URI for production environment
	Secret                string   `protobuf:"bytes,7,opt,name=secret,proto3" json:"secret,omitempty"`                                                              // Combined with identifier, as client credential, used for validating client request and defining authorizer strategy in auth service. It will be automatically generated when not specified
	Identifier            string   `protobuf:"bytes,8,opt,name=identifier,proto3" json:"identifier,omitempty"`                                                      // Combined with secret, as client credential, used for validating client request and defining authorizer strategy in auth service. It will be automatically generated when not specified
	AuthorizerId          string   `protobuf:"bytes,9,opt,name=authorizer_id,json=authorizerId,proto3" json:"authorizer_id,omitempty"`                              // AuthorizerID is a strategy ID based on predefined strategy in auth service
	SystemId              string   `protobuf:"bytes,10,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`                                         // Will be validated with existing systems slug
	SignOutWebHookUrls    []string `protobuf:"bytes,11,rep,name=sign_out_web_hook_urls,json=signOutWebHookUrls,proto3" json:"sign_out_web_hook_urls,omitempty"`     // Webhook URL that will be called after sign out
}

func (x *ClientCreateRequest) Reset() {
	*x = ClientCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCreateRequest) ProtoMessage() {}

func (x *ClientCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCreateRequest.ProtoReflect.Descriptor instead.
func (*ClientCreateRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{0}
}

func (x *ClientCreateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientCreateRequest) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *ClientCreateRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *ClientCreateRequest) GetRedirectUriStaging() string {
	if x != nil {
		return x.RedirectUriStaging
	}
	return ""
}

func (x *ClientCreateRequest) GetRedirectUriProduction() string {
	if x != nil {
		return x.RedirectUriProduction
	}
	return ""
}

func (x *ClientCreateRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ClientCreateRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ClientCreateRequest) GetAuthorizerId() string {
	if x != nil {
		return x.AuthorizerId
	}
	return ""
}

func (x *ClientCreateRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *ClientCreateRequest) GetSignOutWebHookUrls() []string {
	if x != nil {
		return x.SignOutWebHookUrls
	}
	return nil
}

// Find clients RPC payload
type ClientFindsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                                         // When specified, the request will fetch data by Client ID
	Secret       string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`                                 // Should be combined with identifier. When specified, the request will fetch data by Client credential (secret & identifier)
	Identifier   string `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`                         // Should be combined with secret. When specified, the request will fetch data by Client credential (secret & identifier)
	AuthorizerId string `protobuf:"bytes,5,opt,name=authorizer_id,json=authorizerId,proto3" json:"authorizer_id,omitempty"` // When specified, the request will fetch data by authorizer ID
}

func (x *ClientFindsRequest) Reset() {
	*x = ClientFindsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientFindsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientFindsRequest) ProtoMessage() {}

func (x *ClientFindsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientFindsRequest.ProtoReflect.Descriptor instead.
func (*ClientFindsRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{1}
}

func (x *ClientFindsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientFindsRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ClientFindsRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ClientFindsRequest) GetAuthorizerId() string {
	if x != nil {
		return x.AuthorizerId
	}
	return ""
}

// Find client by ID RPC payload
type ClientFindByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Client ID
}

func (x *ClientFindByIDRequest) Reset() {
	*x = ClientFindByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientFindByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientFindByIDRequest) ProtoMessage() {}

func (x *ClientFindByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientFindByIDRequest.ProtoReflect.Descriptor instead.
func (*ClientFindByIDRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{2}
}

func (x *ClientFindByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Find client by credential RPC payload
type ClientFindByCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret     string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`         // Client secret
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"` // Client identifier
}

func (x *ClientFindByCredentialRequest) Reset() {
	*x = ClientFindByCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientFindByCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientFindByCredentialRequest) ProtoMessage() {}

func (x *ClientFindByCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientFindByCredentialRequest.ProtoReflect.Descriptor instead.
func (*ClientFindByCredentialRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{3}
}

func (x *ClientFindByCredentialRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ClientFindByCredentialRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

// Update client RPC payload
type ClientUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                      // Client ID
	Name                  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Client name
	Website               string   `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`                                                            // Website
	RedirectUri           string   `protobuf:"bytes,4,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`                                 // Redirect URI
	RedirectUriStaging    string   `protobuf:"bytes,6,opt,name=redirect_uri_staging,json=redirectUriStaging,proto3" json:"redirect_uri_staging,omitempty"`          // Redirect URI for staging environment
	RedirectUriProduction string   `protobuf:"bytes,5,opt,name=redirect_uri_production,json=redirectUriProduction,proto3" json:"redirect_uri_production,omitempty"` // Redirect URI for production environment
	Secret                string   `protobuf:"bytes,7,opt,name=secret,proto3" json:"secret,omitempty"`                                                              // Combined with identifier, as client credential, used for validating client request and defining authorizer strategy in auth service. It will be automatically generated when not specified
	Identifier            string   `protobuf:"bytes,8,opt,name=identifier,proto3" json:"identifier,omitempty"`                                                      // Combined with secret, as client credential, used for validating client request and defining authorizer strategy in auth service. It will be automatically generated when not specified
	AuthorizerId          string   `protobuf:"bytes,9,opt,name=authorizer_id,json=authorizerId,proto3" json:"authorizer_id,omitempty"`                              // AuthorizerID is a strategy ID based on predefined strategy in auth service
	SystemId              string   `protobuf:"bytes,10,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`                                         // Will be validated with existing systems slug
	SignOutWebHookUrls    []string `protobuf:"bytes,11,rep,name=sign_out_web_hook_urls,json=signOutWebHookUrls,proto3" json:"sign_out_web_hook_urls,omitempty"`     // Webhook URL that will be called after sign out
}

func (x *ClientUpdateRequest) Reset() {
	*x = ClientUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUpdateRequest) ProtoMessage() {}

func (x *ClientUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUpdateRequest.ProtoReflect.Descriptor instead.
func (*ClientUpdateRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{4}
}

func (x *ClientUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientUpdateRequest) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *ClientUpdateRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *ClientUpdateRequest) GetRedirectUriStaging() string {
	if x != nil {
		return x.RedirectUriStaging
	}
	return ""
}

func (x *ClientUpdateRequest) GetRedirectUriProduction() string {
	if x != nil {
		return x.RedirectUriProduction
	}
	return ""
}

func (x *ClientUpdateRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ClientUpdateRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ClientUpdateRequest) GetAuthorizerId() string {
	if x != nil {
		return x.AuthorizerId
	}
	return ""
}

func (x *ClientUpdateRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *ClientUpdateRequest) GetSignOutWebHookUrls() []string {
	if x != nil {
		return x.SignOutWebHookUrls
	}
	return nil
}

// Client credential structure
type ClientCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"` // Client identifier
	Secret     string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`         // Client secret
}

func (x *ClientCredential) Reset() {
	*x = ClientCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCredential) ProtoMessage() {}

func (x *ClientCredential) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCredential.ProtoReflect.Descriptor instead.
func (*ClientCredential) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{5}
}

func (x *ClientCredential) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ClientCredential) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

// Delete client RPC payload
type ClientDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Client ID
}

func (x *ClientDeleteRequest) Reset() {
	*x = ClientDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientDeleteRequest) ProtoMessage() {}

func (x *ClientDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientDeleteRequest.ProtoReflect.Descriptor instead.
func (*ClientDeleteRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{6}
}

func (x *ClientDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Single client response result
type ClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                      // Client ID
	Name                  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Client name
	Website               string   `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`                                                            // Website
	RedirectUri           string   `protobuf:"bytes,4,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`                                 // Redirect URI
	RedirectUriStaging    string   `protobuf:"bytes,6,opt,name=redirect_uri_staging,json=redirectUriStaging,proto3" json:"redirect_uri_staging,omitempty"`          // Redirect URI for staging environment
	RedirectUriProduction string   `protobuf:"bytes,5,opt,name=redirect_uri_production,json=redirectUriProduction,proto3" json:"redirect_uri_production,omitempty"` // Redirect URI for production environment
	Secret                string   `protobuf:"bytes,7,opt,name=secret,proto3" json:"secret,omitempty"`                                                              // Combined with identifier, as client credential, used for validating client request and defining authorizer strategy in auth service. It will be automatically generated when not specified
	Identifier            string   `protobuf:"bytes,8,opt,name=identifier,proto3" json:"identifier,omitempty"`                                                      // Combined with secret, as client credential, used for validating client request and defining authorizer strategy in auth service. It will be automatically generated when not specified
	AuthorizerId          string   `protobuf:"bytes,9,opt,name=authorizer_id,json=authorizerId,proto3" json:"authorizer_id,omitempty"`                              // AuthorizerID is a strategy ID based on predefined strategy in auth service
	SystemId              string   `protobuf:"bytes,10,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`                                         // System slug
	SignOutWebHookUrls    []string `protobuf:"bytes,11,rep,name=sign_out_web_hook_urls,json=signOutWebHookUrls,proto3" json:"sign_out_web_hook_urls,omitempty"`     // Webhook URL that will be called after sign out
}

func (x *ClientResponse) Reset() {
	*x = ClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientResponse) ProtoMessage() {}

func (x *ClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientResponse.ProtoReflect.Descriptor instead.
func (*ClientResponse) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{7}
}

func (x *ClientResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientResponse) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *ClientResponse) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *ClientResponse) GetRedirectUriStaging() string {
	if x != nil {
		return x.RedirectUriStaging
	}
	return ""
}

func (x *ClientResponse) GetRedirectUriProduction() string {
	if x != nil {
		return x.RedirectUriProduction
	}
	return ""
}

func (x *ClientResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ClientResponse) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ClientResponse) GetAuthorizerId() string {
	if x != nil {
		return x.AuthorizerId
	}
	return ""
}

func (x *ClientResponse) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *ClientResponse) GetSignOutWebHookUrls() []string {
	if x != nil {
		return x.SignOutWebHookUrls
	}
	return nil
}

// Client item response result
type ClientItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                      // Client ID
	Name                  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Client name
	Website               string   `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`                                                            // Website
	RedirectUri           string   `protobuf:"bytes,4,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`                                 // Redirect URI
	RedirectUriStaging    string   `protobuf:"bytes,6,opt,name=redirect_uri_staging,json=redirectUriStaging,proto3" json:"redirect_uri_staging,omitempty"`          // Redirect URI for staging environment
	RedirectUriProduction string   `protobuf:"bytes,5,opt,name=redirect_uri_production,json=redirectUriProduction,proto3" json:"redirect_uri_production,omitempty"` // Redirect URI for production environment
	Secret                string   `protobuf:"bytes,7,opt,name=secret,proto3" json:"secret,omitempty"`                                                              // Combined with identifier, as client credential, used for validating client request and defining authorizer strategy in auth service. It will be automatically generated when not specified
	Identifier            string   `protobuf:"bytes,8,opt,name=identifier,proto3" json:"identifier,omitempty"`                                                      // Combined with secret, as client credential, used for validating client request and defining authorizer strategy in auth service. It will be automatically generated when not specified
	AuthorizerId          string   `protobuf:"bytes,9,opt,name=authorizer_id,json=authorizerId,proto3" json:"authorizer_id,omitempty"`                              // AuthorizerID is a strategy ID based on predefined strategy in auth service
	SystemId              string   `protobuf:"bytes,10,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`                                         // System slug
	SignOutWebHookUrls    []string `protobuf:"bytes,11,rep,name=sign_out_web_hook_urls,json=signOutWebHookUrls,proto3" json:"sign_out_web_hook_urls,omitempty"`     // Webhook URL that will be called after sign out
}

func (x *ClientItem) Reset() {
	*x = ClientItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientItem) ProtoMessage() {}

func (x *ClientItem) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientItem.ProtoReflect.Descriptor instead.
func (*ClientItem) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{8}
}

func (x *ClientItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientItem) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *ClientItem) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *ClientItem) GetRedirectUriStaging() string {
	if x != nil {
		return x.RedirectUriStaging
	}
	return ""
}

func (x *ClientItem) GetRedirectUriProduction() string {
	if x != nil {
		return x.RedirectUriProduction
	}
	return ""
}

func (x *ClientItem) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ClientItem) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ClientItem) GetAuthorizerId() string {
	if x != nil {
		return x.AuthorizerId
	}
	return ""
}

func (x *ClientItem) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *ClientItem) GetSignOutWebHookUrls() []string {
	if x != nil {
		return x.SignOutWebHookUrls
	}
	return nil
}

// Client response result
type ClientsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ClientItem `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"` // Result formed as array of Client
	Total   int32         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`    // Total record of result
}

func (x *ClientsResponse) Reset() {
	*x = ClientsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientsResponse) ProtoMessage() {}

func (x *ClientsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientsResponse.ProtoReflect.Descriptor instead.
func (*ClientsResponse) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{9}
}

func (x *ClientsResponse) GetResults() []*ClientItem {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ClientsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_client_proto protoreflect.FileDescriptor

var file_client_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8e, 0x03, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x53, 0x74, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75,
	0x72, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x77, 0x65, 0x62, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x57, 0x65, 0x62,
	0x48, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x15,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x1d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6e, 0x64, 0x42, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x8e,
	0x03, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55,
	0x72, 0x69, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x16, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x68, 0x6f, 0x6f, 0x6b,
	0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x67,
	0x6e, 0x4f, 0x75, 0x74, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x73, 0x22,
	0x4a, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x25, 0x0a, 0x13, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x89, 0x03, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72,
	0x69, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x16, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x5f,
	0x75, 0x72, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e,
	0x4f, 0x75, 0x74, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x85,
	0x03, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x30,
	0x0a, 0x14, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x77,
	0x65, 0x62, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x57, 0x65, 0x62, 0x48, 0x6f,
	0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x56, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xa5,
	0x03, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x46, 0x69,
	0x6e, 0x64, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x46, 0x69,
	0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_proto_rawDescOnce sync.Once
	file_client_proto_rawDescData = file_client_proto_rawDesc
)

func file_client_proto_rawDescGZIP() []byte {
	file_client_proto_rawDescOnce.Do(func() {
		file_client_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_proto_rawDescData)
	})
	return file_client_proto_rawDescData
}

var file_client_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_client_proto_goTypes = []interface{}{
	(*ClientCreateRequest)(nil),           // 0: account.ClientCreateRequest
	(*ClientFindsRequest)(nil),            // 1: account.ClientFindsRequest
	(*ClientFindByIDRequest)(nil),         // 2: account.ClientFindByIDRequest
	(*ClientFindByCredentialRequest)(nil), // 3: account.ClientFindByCredentialRequest
	(*ClientUpdateRequest)(nil),           // 4: account.ClientUpdateRequest
	(*ClientCredential)(nil),              // 5: account.ClientCredential
	(*ClientDeleteRequest)(nil),           // 6: account.ClientDeleteRequest
	(*ClientResponse)(nil),                // 7: account.ClientResponse
	(*ClientItem)(nil),                    // 8: account.ClientItem
	(*ClientsResponse)(nil),               // 9: account.ClientsResponse
}
var file_client_proto_depIdxs = []int32{
	8, // 0: account.ClientsResponse.results:type_name -> account.ClientItem
	0, // 1: account.Client.Create:input_type -> account.ClientCreateRequest
	1, // 2: account.Client.Finds:input_type -> account.ClientFindsRequest
	2, // 3: account.Client.FindByID:input_type -> account.ClientFindByIDRequest
	3, // 4: account.Client.FindByCredential:input_type -> account.ClientFindByCredentialRequest
	4, // 5: account.Client.Update:input_type -> account.ClientUpdateRequest
	6, // 6: account.Client.Delete:input_type -> account.ClientDeleteRequest
	7, // 7: account.Client.Create:output_type -> account.ClientResponse
	9, // 8: account.Client.Finds:output_type -> account.ClientsResponse
	7, // 9: account.Client.FindByID:output_type -> account.ClientResponse
	7, // 10: account.Client.FindByCredential:output_type -> account.ClientResponse
	7, // 11: account.Client.Update:output_type -> account.ClientResponse
	7, // 12: account.Client.Delete:output_type -> account.ClientResponse
	7, // [7:13] is the sub-list for method output_type
	1, // [1:7] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_client_proto_init() }
func file_client_proto_init() {
	if File_client_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_client_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientFindsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientFindByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientFindByCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_client_proto_goTypes,
		DependencyIndexes: file_client_proto_depIdxs,
		MessageInfos:      file_client_proto_msgTypes,
	}.Build()
	File_client_proto = out.File
	file_client_proto_rawDesc = nil
	file_client_proto_goTypes = nil
	file_client_proto_depIdxs = nil
}
